name: Build and Release

on:
  push:
    branches: [ "main" ]
    tags:
      - 'v*.*.*'
  pull_request:
    branches: [ "main" ]

permissions:
  contents: write

jobs:
  build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ windows-latest, ubuntu-latest, macos-latest ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build on Windows
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          ./scripts/build.ps1 Release

      - name: Build on Linux and macOS
        if: runner.os == 'Linux' || runner.os == 'macOS'
        shell: bash
        run: |
          chmod +x ./scripts/build.sh
          ./scripts/build.sh Release

      - name: Upload executable artifact
        uses: actions/upload-artifact@v4
        with:
          name: aes256-${{ runner.os }}
          path: |
            build/release/aes256.exe
            build/release/**/aes256.exe
            build/release/aes256
            build/release/**/aes256
          if-no-files-found: error
          compression-level: 0

  release:
    name: Publish Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: ${{ github.ref_name }}
          draft: false
          prerelease: false

      - name: Upload Release Assets
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          mapfile -t files < <(find ./artifacts -type f -name 'aes256*' -maxdepth 3)
          if [ ${#files[@]} -eq 0 ]; then
            echo "No executable files found to upload" >&2
            exit 1
          fi
          for f in "${files[@]}"; do
            gh release upload "${{ github.ref_name }}" "$f" --clobber --repo "${{ github.repository }}"
          done
