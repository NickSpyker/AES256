name: Build and Release

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: write

jobs:
  build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ windows-latest, ubuntu-latest, macos-latest ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build on Windows
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          ./scripts/build.ps1 Release

      - name: Build on Linux and macOS
        if: runner.os == 'Linux' || runner.os == 'macOS'
        shell: bash
        run: |
          chmod +x ./scripts/build.sh
          ./scripts/build.sh Release

      - name: Upload executable artifact
        uses: actions/upload-artifact@v4
        with:
          name: aes256-${{ runner.os }}
          path: |
            build/release/aes256.exe
            build/release/**/aes256.exe
            build/release/aes256
            build/release/**/aes256
          if-no-files-found: error
          compression-level: 0

  release:
    name: Publish Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Prepare release assets
        shell: bash
        run: |
          mkdir -p release-assets
          find ./artifacts -type f -name 'aes256*' -exec cp {} release-assets/ \;
          cd release-assets
          # Rename files to include OS
          for os_dir in ../artifacts/aes256-*; do
            os_name=$(basename "$os_dir" | sed 's/aes256-//')
            if [ -f "../artifacts/aes256-${os_name}/aes256.exe" ]; then
              cp "../artifacts/aes256-${os_name}/aes256.exe" "./aes256-${os_name}.exe"
            elif [ -f "../artifacts/aes256-${os_name}/aes256" ]; then
              cp "../artifacts/aes256-${os_name}/aes256" "./aes256-${os_name}"
            fi
          done
          ls -lh

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: release-assets/*
          draft: false
          prerelease: ${{ contains(github.ref_name, '-') }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
